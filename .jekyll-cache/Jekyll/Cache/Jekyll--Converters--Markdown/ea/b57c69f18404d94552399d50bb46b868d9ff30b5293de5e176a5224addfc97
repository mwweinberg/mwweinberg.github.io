I"b<p>In celebration of <a href="https://en.wikipedia.org/wiki/Public_Domain_Day">Public Domain Day</a> 2020 I decided to try to turn the old monitor in my office into a picture frame to display a rotating collection of public domain works.  The Cleveland Museum of Art (CMA) launched a robust <a href="https://www.clevelandart.org/open-access">Open Access program</a> in 2019, so I decided to use <a href="http://openaccess-api.clevelandart.org/">their API</a> to power it. This blog post explains all of the steps in creating the project so you can make one too.</p>

<p>This is a fairly lightweight project, so all you need to make it happen is:</p>

<ol>
  <li>A monitor</li>
  <li>A raspberry pi (or any other computer)</li>
  <li>Some code</li>
</ol>

<p>Most of this post is about the code.  The theory behind this project is that there is a website that regularly pulls a new image from the CMA’s API and displays it along with some information like the work’s title and creator.  The raspberry pi boots into a fullscreen browser displaying that page.  The screen also needs to automatically turn off at night because it is a waste to keep the monitor on all night when there is no one around to see it.</p>

<p>The entire project is a double celebration of openness. In addition to the works being displayed, the only reason I could even begin to build it is that the open nature of the internet’s architecture allows me to peek at better-designed sites to learn from them.  Open educational resources like the <a href="https://www.youtube.com/channel/UCvjgXvBlbQiydffZU7m1_aw">Coding Train</a> have taught me just enough javascript to be able to put something like this together.</p>

<h1 id="the-site">The Site</h1>

<p>I decided (guessed?) that the easiest way to make all of this work was to create a website that displayed the rotating set of pictures.  I’m bad at javascript, so this gave me a chance to learn a little bit more about it.</p>

<p>The self-contained site is available in <a href="https://github.com/mwweinberg/public_domain_pi">this repo</a>.  If you don’t care about how it works, you can just access a live version of it <a href="https://michaelweinberg.org/cma_pd/">here</a>.</p>

<h2 id="indexhtml">index.html</h2>

<p>This file is minimal and straightforward - it is essentially just a container with pointers to a stylesheet and the script. The one thing to note is that the script is inside of a container div:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">'container'</span><span class="nt">&gt;</span>

         <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">'script.js'</span><span class="nt">&gt;&lt;/script&gt;</span>

        <span class="nt">&lt;/div&gt;</span>
</code></pre></div></div>

<p>This allows me to overlay the text descriptions on top of the image.</p>

<h2 id="scriptjs">script.js</h2>

<p>This <a href="https://github.com/mwweinberg/public_domain_pi/blob/master/script.js">file</a> is the heart of the action.  I will walk through each section to explain what it does.  All of the <code class="highlighter-rouge">console.log</code> lines are just for my own troubleshooting and can basically be ignored.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//function to generate a random number</span>
<span class="kd">function</span> <span class="nx">getRndInteger</span><span class="p">(</span><span class="nx">min</span><span class="p">,</span> <span class="nx">max</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">*</span> <span class="p">(</span><span class="nx">max</span> <span class="o">-</span> <span class="nx">min</span><span class="p">)</span> <span class="p">)</span> <span class="o">+</span> <span class="nx">min</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<p>This initial function is used to generate a random number. The random number is needed in two places: first to pick the image from the collection, and second to determine how long the image will stay up before the page refreshes.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//uses the function to pick a random image in the collection</span>
<span class="kd">var</span> <span class="nx">offset</span> <span class="o">=</span> <span class="nx">getRndInteger</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">31278</span><span class="p">);</span>
<span class="c1">//inserts that random number into the request url, returning a json file</span>
<span class="kd">var</span> <span class="nx">target_json_url</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">https://openaccess-api.clevelandart.org/api/artworks/?limit=10&amp;indent=1&amp;cc0=1&amp;has_image=1&amp;skip=</span><span class="dl">"</span> <span class="o">+</span> <span class="nx">offset</span><span class="p">;</span>
</code></pre></div></div>

<p>This block of code is used to access the entry via the CMA’s API.  I believe that there are 31,277 entries in the CMA’s open access catalog that have an image. The first line picks a random number between 1 and 31,277.  The second line uses the API’s syntax to jump to the work that corresponds to that number.</p>

<p>The <code class="highlighter-rouge">limit=10&amp;indent=1</code> elements in the URL are probably unnecessary.  The <code class="highlighter-rouge">cc0=1&amp;has_image=1</code> elements are important - they limit results to ones that have a CC0 license and have an image associated with the entry.  Those are the open access entries that I care about.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//create new request object instance</span>
<span class="kd">let</span> <span class="nx">request</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">XMLHttpRequest</span><span class="p">();</span>
<span class="c1">//opens the file</span>
<span class="nx">request</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="dl">'</span><span class="s1">GET</span><span class="dl">'</span><span class="p">,</span> <span class="nx">target_json_url</span><span class="p">);</span>
<span class="nx">request</span><span class="p">.</span><span class="nx">responseType</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">json</span><span class="dl">'</span>
<span class="nx">request</span><span class="p">.</span><span class="nx">send</span><span class="p">();</span>
</code></pre></div></div>

<p>This block of text creates an object to hold the json file that the API returns at the URL and then opens the json file into it.  Basically it creates and fills the container for the JSON file that corresponds to the object that we randomly selected above.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">request</span><span class="p">.</span><span class="nx">onload</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">response_json</span> <span class="o">=</span> <span class="nx">request</span><span class="p">.</span><span class="nx">response</span><span class="p">;</span>
    <span class="c1">//gets the image URL + tombstone of a random image from the collection and turns it into an array assigned to a variable</span>
    <span class="kd">var</span> <span class="nx">found_image_info</span> <span class="o">=</span> <span class="nx">grabImageInfo</span><span class="p">(</span><span class="nx">response_json</span><span class="p">);</span>

    <span class="kd">var</span> <span class="nx">picked_image_URL</span> <span class="o">=</span> <span class="nx">found_image_info</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
    <span class="kd">var</span> <span class="nx">picked_image_tombstone</span> <span class="o">=</span> <span class="nx">found_image_info</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
    <span class="kd">var</span> <span class="nx">picked_image_title</span> <span class="o">=</span> <span class="nx">found_image_info</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>
    <span class="kd">var</span> <span class="nx">picked_image_author</span> <span class="o">=</span> <span class="nx">found_image_info</span><span class="p">[</span><span class="mi">3</span><span class="p">];</span>
    <span class="kd">var</span> <span class="nx">picked_image_date</span> <span class="o">=</span> <span class="nx">found_image_info</span><span class="p">[</span><span class="mi">4</span><span class="p">];</span>

    <span class="c1">//creates the image to be  posted</span>
    <span class="kd">var</span> <span class="nx">img</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="dl">"</span><span class="s2">img</span><span class="dl">"</span><span class="p">);</span>
    <span class="nx">img</span><span class="p">.</span><span class="nx">src</span> <span class="o">=</span> <span class="nx">picked_image_URL</span><span class="p">;</span>

    <span class="nx">img</span><span class="p">.</span><span class="nx">alt</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">picked_image_tombstone</span><span class="dl">'</span><span class="p">;</span>

    <span class="c1">//creates the text</span>
    <span class="kd">var</span> <span class="nx">tomb_text</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createTextNode</span><span class="p">(</span><span class="nx">picked_image_tombstone</span><span class="p">)</span>

    <span class="c1">//creates the linebreak</span>
    <span class="kd">var</span> <span class="nx">linebreak</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="dl">'</span><span class="s1">br</span><span class="dl">'</span><span class="p">);</span>

    <span class="kd">let</span> <span class="nx">item</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="dl">'</span><span class="s1">div</span><span class="dl">'</span><span class="p">);</span>
    <span class="nx">item</span><span class="p">.</span><span class="nx">classList</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="dl">'</span><span class="s1">item</span><span class="dl">'</span><span class="p">);</span>
    <span class="nx">item</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="s2">`&lt;div class="container"&gt;&lt;img class="beach-image"  src="</span><span class="p">${</span><span class="nx">picked_image_URL</span><span class="p">}</span><span class="s2">" alt="beach image"/&gt;&lt;div class="textStyle"&gt;</span><span class="p">${</span><span class="nx">picked_image_title</span><span class="p">}</span><span class="s2">&lt;br&gt;</span><span class="p">${</span><span class="nx">picked_image_author</span><span class="p">}</span><span class="s2">&lt;br&gt;</span><span class="p">${</span><span class="nx">picked_image_date</span><span class="p">}</span><span class="s2">&lt;/div&gt;&lt;/div&gt;`</span><span class="p">;</span>
    <span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">item</span><span class="p">);</span>

    <span class="c1">//set up the refresh</span>
    <span class="c1">//time is in ms</span>
    <span class="c1">//this sets the range</span>
    <span class="kd">var</span> <span class="nx">refresh_interval</span> <span class="o">=</span> <span class="nx">getRndInteger</span><span class="p">(</span><span class="mi">5000</span><span class="p">,</span> <span class="mi">20000</span><span class="p">)</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">refresh rate = </span><span class="dl">"</span> <span class="o">+</span> <span class="nx">refresh_interval</span><span class="p">);</span>
    <span class="c1">//this uses the range to reset the page</span>
    <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
        <span class="nx">location</span> <span class="o">=</span> <span class="dl">''</span>
    <span class="p">},</span><span class="nx">refresh_interval</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<p>This block is where most of the work happens, so I’ll break it down in smaller pieces.  The reason it is all tucked into a <code class="highlighter-rouge">request.onload</code> function is that the code in this block waits to load until it has successfully loaded the data from the API in the background.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="kd">const</span> <span class="nx">response_json</span> <span class="o">=</span> <span class="nx">request</span><span class="p">.</span><span class="nx">response</span><span class="p">;</span>
    <span class="c1">//gets the image URL + tombstone of a random image from the collection and turns it into an array assigned to a variable</span>
    <span class="kd">var</span> <span class="nx">found_image_info</span> <span class="o">=</span> <span class="nx">grabImageInfo</span><span class="p">(</span><span class="nx">response_json</span><span class="p">);</span>
</code></pre></div></div>

<p>This first section assigns the contents of the JSON file to a variable and then sends the JSON file to the <code class="highlighter-rouge">grabimageInfo</code> function described below.  That function pulls all of the data I care about out of the JSON file and puts it in an array that can be accessed with bracket notation (see next block).</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="kd">var</span> <span class="nx">picked_image_URL</span> <span class="o">=</span> <span class="nx">found_image_info</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
    <span class="kd">var</span> <span class="nx">picked_image_tombstone</span> <span class="o">=</span> <span class="nx">found_image_info</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
    <span class="kd">var</span> <span class="nx">picked_image_title</span> <span class="o">=</span> <span class="nx">found_image_info</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>
    <span class="kd">var</span> <span class="nx">picked_image_author</span> <span class="o">=</span> <span class="nx">found_image_info</span><span class="p">[</span><span class="mi">3</span><span class="p">];</span>
    <span class="kd">var</span> <span class="nx">picked_image_date</span> <span class="o">=</span> <span class="nx">found_image_info</span><span class="p">[</span><span class="mi">4</span><span class="p">];</span>
</code></pre></div></div>
<p>This section assigns a variable to each element in the <code class="highlighter-rouge">found_image_info</code> array.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="c1">//creates the image to be  posted</span>
    <span class="kd">var</span> <span class="nx">img</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="dl">"</span><span class="s2">img</span><span class="dl">"</span><span class="p">);</span>
    <span class="nx">img</span><span class="p">.</span><span class="nx">src</span> <span class="o">=</span> <span class="nx">picked_image_URL</span><span class="p">;</span>

    <span class="nx">img</span><span class="p">.</span><span class="nx">alt</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">picked_image_tombstone</span><span class="dl">'</span><span class="p">;</span>
</code></pre></div></div>

<p>This section creates an image element. The source is the URL that comes from the JSON file and the alt text is the tombstone text from the JSON file.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="kd">let</span> <span class="nx">item</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="dl">'</span><span class="s1">div</span><span class="dl">'</span><span class="p">);</span>
    <span class="nx">item</span><span class="p">.</span><span class="nx">classList</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="dl">'</span><span class="s1">item</span><span class="dl">'</span><span class="p">);</span>
    <span class="nx">item</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="s2">`&lt;div class="container"&gt;&lt;img class="beach-image"  src="</span><span class="p">${</span><span class="nx">picked_image_URL</span><span class="p">}</span><span class="s2">" alt="beach image"/&gt;&lt;div class="textStyle"&gt;</span><span class="p">${</span><span class="nx">picked_image_title</span><span class="p">}</span><span class="s2">&lt;br&gt;</span><span class="p">${</span><span class="nx">picked_image_author</span><span class="p">}</span><span class="s2">&lt;br&gt;</span><span class="p">${</span><span class="nx">picked_image_date</span><span class="p">}</span><span class="s2">&lt;/div&gt;&lt;/div&gt;`</span><span class="p">;</span>
    <span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">item</span><span class="p">);</span>
</code></pre></div></div>

<p>This section creates the HTML to be added to the index.html file.  The <code class="highlighter-rouge">item.innerHTML</code> section creates an HTML payload with the image and the title, author, and date overlayed on top of it.  If you want to change what is displayed over the image this is where you should start messing around.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="c1">//set up the refresh</span>
    <span class="c1">//time is in ms</span>
    <span class="c1">//this sets the range</span>
    <span class="kd">var</span> <span class="nx">refresh_interval</span> <span class="o">=</span> <span class="nx">getRndInteger</span><span class="p">(</span><span class="mi">5000</span><span class="p">,</span> <span class="mi">20000</span><span class="p">)</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">refresh rate = </span><span class="dl">"</span> <span class="o">+</span> <span class="nx">refresh_interval</span><span class="p">);</span>
    <span class="c1">//this uses the range to reset the page</span>
    <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
        <span class="nx">location</span> <span class="o">=</span> <span class="dl">''</span>
    <span class="p">},</span><span class="nx">refresh_interval</span><span class="p">)</span>
</code></pre></div></div>
<p>This is the section that sets up the page refresh.  The arguments you pass to the <code class="highlighter-rouge">getRndInteger</code> variable determines the bounds of the refresh rate.  Remember that the numbers are in ms.  I decided to make this slightly random instead of a fixed number to add a bit of variability to the display.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">grabImageInfo</span><span class="p">(</span><span class="nx">jsonObj</span><span class="p">)</span> <span class="p">{</span>

    <span class="c1">//pulls the elements of each piece and assigns it to a variable</span>
    <span class="kd">var</span> <span class="nx">data_url</span> <span class="o">=</span> <span class="nx">jsonObj</span><span class="p">[</span><span class="dl">'</span><span class="s1">data</span><span class="dl">'</span><span class="p">][</span><span class="mi">0</span><span class="p">][</span><span class="dl">'</span><span class="s1">images</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">web</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">url</span><span class="dl">'</span><span class="p">]</span>
    <span class="kd">var</span> <span class="nx">data_tombstone</span> <span class="o">=</span> <span class="nx">jsonObj</span><span class="p">[</span><span class="dl">'</span><span class="s1">data</span><span class="dl">'</span><span class="p">][</span><span class="mi">0</span><span class="p">][</span><span class="dl">'</span><span class="s1">tombstone</span><span class="dl">'</span><span class="p">]</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">data_tombstone</span><span class="p">)</span>
    <span class="kd">var</span> <span class="nx">data_title</span> <span class="o">=</span> <span class="nx">jsonObj</span><span class="p">[</span><span class="dl">'</span><span class="s1">data</span><span class="dl">'</span><span class="p">][</span><span class="mi">0</span><span class="p">][</span><span class="dl">'</span><span class="s1">title</span><span class="dl">'</span><span class="p">]</span>
    <span class="c1">//the author info sometimes doesn't exist, which screws up the function. Pulling this part out of the function fixes it because the jsonObj is not evaluated before the try/catch. I am not sure what that means but it works.</span>
    <span class="k">try</span> <span class="p">{</span>
         <span class="nx">data_author</span> <span class="o">=</span> <span class="nx">jsonObj</span><span class="p">[</span><span class="dl">'</span><span class="s1">data</span><span class="dl">'</span><span class="p">][</span><span class="mi">0</span><span class="p">][</span><span class="dl">'</span><span class="s1">creators</span><span class="dl">'</span><span class="p">][</span><span class="mi">0</span><span class="p">][</span><span class="dl">'</span><span class="s1">description</span><span class="dl">'</span><span class="p">]</span>
     <span class="p">}</span>
     <span class="k">catch</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
         <span class="nx">data_author</span> <span class="o">=</span> <span class="dl">''</span>

     <span class="p">}</span>
    <span class="kd">var</span> <span class="nx">data_creation_date</span> <span class="o">=</span> <span class="nx">jsonObj</span><span class="p">[</span><span class="dl">'</span><span class="s1">data</span><span class="dl">'</span><span class="p">][</span><span class="mi">0</span><span class="p">][</span><span class="dl">'</span><span class="s1">creation_date</span><span class="dl">'</span><span class="p">]</span>

    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">url = </span><span class="dl">"</span> <span class="o">+</span><span class="nx">data_url</span><span class="p">)</span>

    <span class="c1">//creates an array with the URL, tombstone, title, author, and creation date of the random object picked</span>
    <span class="kd">var</span> <span class="nx">function_image_data</span> <span class="o">=</span> <span class="p">[</span><span class="nx">data_url</span><span class="p">,</span> <span class="nx">data_tombstone</span><span class="p">,</span> <span class="nx">data_title</span><span class="p">,</span> <span class="nx">data_author</span><span class="p">,</span> <span class="nx">data_creation_date</span><span class="p">]</span>
    <span class="c1">//returns that array</span>
    <span class="k">return</span> <span class="nx">function_image_data</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>This is the function to extract data from the JSON file.  It pulls each relevant element and then adds it to an array.  Each of the <code class="highlighter-rouge">var data_url = jsonObj['data'][0]['images']['web']['url']</code> requests are essentially the same, with the difference being where in the JSON file they are looking for the relevant data.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">try</span> <span class="p">{</span>
     <span class="nx">data_author</span> <span class="o">=</span> <span class="nx">jsonObj</span><span class="p">[</span><span class="dl">'</span><span class="s1">data</span><span class="dl">'</span><span class="p">][</span><span class="mi">0</span><span class="p">][</span><span class="dl">'</span><span class="s1">creators</span><span class="dl">'</span><span class="p">][</span><span class="mi">0</span><span class="p">][</span><span class="dl">'</span><span class="s1">description</span><span class="dl">'</span><span class="p">]</span>
 <span class="p">}</span>
 <span class="k">catch</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
     <span class="nx">data_author</span> <span class="o">=</span> <span class="dl">''</span>

 <span class="p">}</span>
</code></pre></div></div>

<p>The author variable works slightly differently.  Sometimes the author data does not exist in the records.  This structure allows the script to handle errors without crashing.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">function_image_data</span> <span class="o">=</span> <span class="p">[</span><span class="nx">data_url</span><span class="p">,</span> <span class="nx">data_tombstone</span><span class="p">,</span> <span class="nx">data_title</span><span class="p">,</span> <span class="nx">data_author</span><span class="p">,</span> <span class="nx">data_creation_date</span><span class="p">]</span>
<span class="c1">//returns that array</span>
<span class="k">return</span> <span class="nx">function_image_data</span><span class="p">;</span>
</code></pre></div></div>
<p>Finally, each element of the data is put into an array and returned out of the function.  The order of how the data is added to the array is arbitrary, but it is consistent so if you move something around here make sure to change how you pull them out at the top of the script.</p>

<h2 id="stylecss">style.css</h2>

<p>This is also a fairly strightforward css file.  The <code class="highlighter-rouge">.textStyle</code> section is what you use to style the text. I also believe that the <code class="highlighter-rouge">.container</code> section needs to be set to relative in order for the overlay to work.</p>

<p>The most interesting part of the file is probably the <code class="highlighter-rouge">@font-face</code> section.  That loads the custom font.  The font is the <a href="https://www.cooperhewitt.org/open-source-at-cooper-hewitt/cooper-hewitt-the-typeface-by-chester-jenkins/">fantastic font</a> that the Cooper Hewitt made available as part of their open access project a few years ago.  I always like using the font for open access-related projects.  The fonts live in the <code class="highlighter-rouge">/data</code> folder.  They are applied to all of the text in the <code class="highlighter-rouge">*</code> section.</p>

<h1 id="the-pi">The Pi</h1>

<p>Once you have everything up and running you can access it from any browser.  You can try it <a href="https://michaelweinberg.org/cma_pd/">here</a>, press F11, and just let it happen in full screen.</p>

<p>If you want to run it constantly as a picture frame it makes sense to devote a computer to the task. A Raspberry Pi is a prefect candidate because it is inexpensive and draws a relatively small amount of electricity.</p>

<p>You could set things up so the pi hosts the file locally and then just opens it. I decided not to do that, mostly because that would involve automatically starting a local server on the pi, which was one more thing to set up. Since the service needs to be online to hit the API anyway, I thought it would be easier to just set up the page on my own domain.  I have no idea if that is actually easier.</p>

<p>There are two and a half things you need to do in order to set the pi to automatically boot into displaying the site in fullscreen mode as a full time appliance.</p>

<h2 id="start-in-fullscreen-mode">Start in Fullscreen Mode</h2>

<p>You can start Chromium in fullscreen mode from the command line. That means you can add the line to the pi’s autostart file.  Assuming your username is just ‘pi’ (the default when you start raspbian), open a terminal window and type:</p>

<p><code class="highlighter-rouge">nano /home/pi/.config/lxsession/LXDE-pi/autostart</code></p>

<p>This will allow you to edit the autostart file directly.  Add this line to the file (which is probably otherwise blank):</p>

<p><code class="highlighter-rouge">@chromium-browser --start-fullscreen michaelweinberg.org/cma_pd</code></p>

<p>You can change the final URL to whatever you like. If you are hosting your own version of this page, that is where to make the switch.</p>

<p>You may find that your fullscreen display still gets a scroll bar on one side. If that’s the case, the half thing you need to do is open chromium and type <code class="highlighter-rouge">chrome://flags</code> in the toolbar.  Once you are looking at the flags, search for <code class="highlighter-rouge">overlay scrollbars</code> and enable it. That will hide the scroll bars.</p>

<h2 id="turn-off-the-screen">Turn off the Screen</h2>

<p>The final thing you might want to do is turn off the screen of the display at night.  In order to do this you need to make two entries in cron.  <a href="https://opensource.com/article/17/11/how-use-cron-linux">Here</a> is a nice intro to cron.  Cron is a linux utility that allows you to schedule commands.</p>

<p>The commands you end up scheduling may vary based on your particular setup.  <a href="https://www.screenly.io/blog/2017/07/02/how-to-automatically-turn-off-and-on-your-monitor-from-your-raspberry-pi/">This</a> is a helpful tutorial laying out options to make this happen. The ones that worked for me were the <code class="highlighter-rouge">vcgencmd</code> ones.</p>

<p>In order to schedule those I opened a terminal window and typed <code class="highlighter-rouge">crontab -e</code>.  I then added two lines.  This line turned off the display: <code class="highlighter-rouge">vcgencmd display_power 0</code> and this line turned it back on: <code class="highlighter-rouge">vcgencmd display_power 1</code>. Use crontab to schedule these at appropriate times.</p>

<hr />

<p>That’s that. This will let you set up a rotating set of public domain images on any display you might have access to.  Good luck with your own version.</p>

<p><em>List image: <a href="https://www.clevelandart.org/art/1984.1927">The Biglin Brothers Turning the Stake, Thomas Eakins, 1873</a></em></p>
:ET